#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
"""
import sys
import subprocess

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python"""
    version = sys.version_info
    print(f"Python version: {version.major}.{version.minor}.{version.micro}")
    
    if version.major == 3 and version.minor >= 12:
        print("‚úÖ Python 3.12+ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return True
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.12+")
        return False

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã"""
    try:
        import fastapi
        import uvicorn
        import aiohttp
        import pydantic
        import bs4
        import yaml
        import markdownify
        import nh3
        import dotenv
        
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def check_uv_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å uv"""
    try:
        result = subprocess.run(['uv', '--version'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print(f"‚úÖ uv –¥–æ—Å—Ç—É–ø–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå uv –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå uv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_app_startup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"""
    try:
        from main import app
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç Docker –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
    print("=" * 40)
    
    checks = [
        ("Python version", check_python_version),
        ("Dependencies", check_imports),
        ("uv availability", check_uv_available),
        ("App startup", check_app_startup),
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\nüîç {name}:")
        success = check_func()
        results.append(success)
    
    print("\n" + "=" * 40)
    if all(results):
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏! Docker –≥–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä–∫–µ")
        sys.exit(0)
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        sys.exit(1)