"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º Tavily API
"""
import asyncio
import os
import aiohttp
from dotenv import load_dotenv
from tavily_client import TavilyClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADAPTER_PORT = os.getenv("ADAPTER_PORT", "8013")
API_BASE_URL = f"http://localhost:{ADAPTER_PORT}"

async def test_direct_api():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API —Å –Ω–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º content_format"""
    print("=== –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç) ===")
    async with aiohttp.ClientSession() as session:
        payload = {
            "query": "Python programming",
            "max_results": 3,
            "include_raw_content": True,
            "content_format": "text"
        }
        async with session.post(f"{API_BASE_URL}/search", json=payload) as response:
            data = await response.json()
            print(f"Results count: {len(data['results'])}")
            if data['results'] and data['results'][0].get('raw_content'):
                print(f"Raw content preview: {data['results'][0]['raw_content'][:200]}...")
    
    print("\n=== –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ API (Markdown —Ñ–æ—Ä–º–∞—Ç) ===")
    async with aiohttp.ClientSession() as session:
        payload = {
            "query": "Python programming",
            "max_results": 3,
            "include_raw_content": True,
            "content_format": "markdown"
        }
        async with session.post(f"{API_BASE_URL}/search", json=payload) as response:
            data = await response.json()
            print(f"Results count: {len(data['results'])}")
            if data['results'] and data['results'][0].get('raw_content'):
                print(f"Markdown content preview: {data['results'][0]['raw_content'][:200]}...")

async def test_tavily_api_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Tavily API —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Tavily API ===")
    async with aiohttp.ClientSession() as session:
        # –≠–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Tavily –∑–∞–ø—Ä–æ—Å
        payload = {
            "query": "—Ü–µ–Ω–∞ bmw x6",
            "max_results": 5,
            "include_raw_content": True
            # content_format –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "markdown"
        }
        async with session.post(f"{API_BASE_URL}/search", json=payload) as response:
            data = await response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ Tavily
            expected_keys = ['query', 'follow_up_questions', 'answer', 'images', 'results', 'response_time', 'request_id']
            print("Response keys:", list(data.keys()))
            print("All expected keys present:", all(key in data for key in expected_keys))
            print("Results count:", len(data['results']))
            
            if data['results']:
                first_result = data['results'][0]
                print("First result URL:", first_result["url"])
                print("First result title:", first_result["title"])
                if first_result.get("raw_content"):
                    print("Has raw content:", len(first_result["raw_content"]), "chars")
                    print("Content type: Markdown (default)")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Markdown
                    content = first_result["raw_content"]
                    if any(marker in content for marker in ['#', '**', '*', '```', '>']):
                        print("‚úÖ Markdown formatting detected")
                    else:
                        print("‚ö†Ô∏è  No obvious Markdown formatting")

def test_tavily_client():
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - TavilyClient —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å SearXNG"""
    print("\n=== –¢–µ—Å—Ç —á–µ—Ä–µ–∑ Tavily Client (Legacy) ===")
    print("‚ö†Ô∏è  TavilyClient –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ SearXNG, –º–∏–Ω—É—è –∞–¥–∞–ø—Ç–µ—Ä")
    print("üìç –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã –≤—ã—à–µ")

if __name__ == "__main__":
    # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)  
    test_tavily_client()
    
    # –¢–µ—Å—Ç—ã –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    asyncio.run(test_direct_api())
    
    # –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Tavily API
    asyncio.run(test_tavily_api_compatibility())
