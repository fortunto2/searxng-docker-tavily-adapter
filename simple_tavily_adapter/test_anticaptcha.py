#!/usr/bin/env python3
"""
–¢–µ—Å—Ç anti-captcha —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""
import asyncio
import os
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

ADAPTER_PORT = os.getenv("ADAPTER_PORT", "8013")
API_BASE_URL = f"http://localhost:{ADAPTER_PORT}"

async def test_anticaptcha_enabled():
    """–¢–µ—Å—Ç —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º anti-captcha"""
    print("=== –¢–µ—Å—Ç —Å Anti-CAPTCHA (–≤–∫–ª—é—á–µ–Ω–æ) ===")
    
    async with aiohttp.ClientSession() as session:
        payload = {
            "query": "test captcha bypass",
            "max_results": 3,
            "include_raw_content": False
        }
        
        try:
            async with session.post(f"{API_BASE_URL}/search", json=payload) as response:
                data = await response.json()
                print(f"Status: {response.status}")
                print(f"Results count: {len(data.get('results', []))}")
                print(f"Response time: {data.get('response_time', 0):.2f}s")
                
                if len(data.get('results', [])) > 0:
                    print("‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω (anti-captcha —Ä–∞–±–æ—Ç–∞–µ—Ç)")
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –¥–≤–∏–∂–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_different_queries():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
    queries = [
        "python programming",
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "weather today",
        "–Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
    ]
    
    print("\n=== –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ ===")
    
    for i, query in enumerate(queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: '{query}'")
        
        async with aiohttp.ClientSession() as session:
            payload = {
                "query": query,
                "max_results": 2,
                "include_raw_content": False
            }
            
            try:
                async with session.post(f"{API_BASE_URL}/search", json=payload) as response:
                    data = await response.json()
                    results_count = len(data.get('results', []))
                    response_time = data.get('response_time', 0)
                    
                    if results_count > 0:
                        print(f"‚úÖ {results_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {response_time:.2f}—Å")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {response_time:.2f}—Å")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(1)

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Anti-CAPTCHA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    print(f"üîó API URL: {API_BASE_URL}")
    print()
    
    asyncio.run(test_anticaptcha_enabled())
    asyncio.run(test_different_queries())
    
    print("\nüí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("  ENABLE_ANTI_CAPTCHA=true/false - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å")
    print("  MAX_SEARCH_RETRIES=3 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
    print("  –í –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏–¥–Ω—ã –¥–µ—Ç–∞–ª–∏ retry –ø–æ–ø—ã—Ç–æ–∫")